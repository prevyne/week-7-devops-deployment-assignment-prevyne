name: MERN Stack CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Backend tests and build
  backend-ci:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './server/package.json'
      - name: Install backend dependencies
        run: |
          cd server
          npm ci
      - name: Run backend linting
        run: |
          cd server
          npm run lint --if-present
      - name: Run backend tests
        run: |
          cd server
          npm test --if-present
        env:
          CI: true
          MONGODB_URI: mongodb://localhost:27017/test
          JWT_SECRET: test_secret_for_ci
      - name: Build backend
        run: |
          cd server
          npm run build --if-present

  # Frontend tests and build
  frontend-ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './client/package.json'
      - name: Install frontend dependencies
        run: |
          cd client
          npm ci
      - name: Run frontend linting
        run: |
          cd client
          npm run lint --if-present
      - name: Run frontend tests
        run: |
          cd client
          npm test --if-present
        env:
          CI: true
      - name: Build frontend
        run: |
          cd client
          npm run build
      - name: Upload frontend build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: client/dist
          retention-days: 1

  # Deploy backend to Render
  deploy-backend:
    needs: [backend-ci, frontend-ci]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}

  # Deploy frontend to Vercel
  deploy-frontend:
    needs: [backend-ci, frontend-ci]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download frontend build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: client/dist
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./client
          vercel-args: '--prod'

  # Run health checks after deployment
  health-check:
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Check backend health
        uses: jtalk/url-health-check-action@v3
        with:
          url: ${{ secrets.BACKEND_URL }}/api/health
          max-attempts: 3
          retry-delay: 5s
      - name: Check frontend
        uses: jtalk/url-health-check-action@v3
        with:
          url: ${{ secrets.FRONTEND_URL }}
          max-attempts: 3
          retry-delay: 5s
